<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">

    <!--<bean id="myAsyncUncaughtExceptionHandler" class="com.segi.spring.task.executor.exception.MyAsyncUncaughtExceptionHandler"/>

    <task:annotation-driven executor="executor" exception-handler="myAsyncUncaughtExceptionHandler"/>-->
    <!--pool-size:没有指定为单线程-->
    <task:scheduler id="scheduler" pool-size="10"/>
    <task:scheduled-tasks scheduler="scheduler">
        <task:scheduled ref="xmlConfigSchedulerService" method="doScheduledTask" fixed-delay="1000"/>
    </task:scheduled-tasks>
    <!--pool-size：core-size和max-size相等-->
    <!--
        1、如果活动线程小于core-size，执行器使用空闲线程
        2、如果core-size满了，任务将会加入queue，直至queue容量满了（默认无限制）
        3、如果queue容量满了，执行器创建新的线程，直至max-size满了
        4、如果max-size满了，执行器拒绝任务。
    -->
    <!--
        拒绝策略：
        1、AbortPolicy（默认）：默认情况下，如果任务被拒绝，将抛出TaskRejectedException异常
        2、DiscardPolicy、DiscardOldestPolicy：过载下忽略任务
        3、CallerRunsPolicy：在过载下限制任务提交。调用者在进行一个任务时，不能同时提交其它任务。
    -->
    <!--
        keep-alive:如果池中当前的线程数量大于核心数量，那么在没有处理任务的情况下等待这段时间（秒）之后，多余的线程将被终止。0为立即终止
    -->

    <task:annotation-driven/>
    <task:executor id="executor"
                   pool-size="5-10"
                   queue-capacity="20"
                   rejection-policy="CALLER_RUNS"
                   keep-alive="1000"/>
    <!--<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>-->
    <bean id="executor-two" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5"/>
        <property name="maxPoolSize" value="10"/>
        <property name="queueCapacity" value="25"/>
    </bean>

</beans>